name: Build Release

on: 
  push:   # Pushイベントをトリガーに追加
    branches:
      - main  # 対象ブランチを指定
  workflow_dispatch:  # 手動実行も可能に

jobs:

  # Validate Repository Configuration
  config:
    runs-on: ubuntu-latest
    outputs:
      config_package: ${{ steps.config_package.outputs.configPackage }}
    steps:

    # Ensure that required repository variable has been created for the Package
    - name: Validate Package Config
      id: config_package
      run: |
          echo "configPackage=true" >> $GITHUB_OUTPUT;

  # Build and release the Package
  # If the repository is not configured properly, this job will be skipped
  build:
    needs: config
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      packagePath: .
    if: needs.config.outputs.config_package == 'true'
    steps:

      # Checkout Local Repository
      - name: Checkout
        uses: actions/checkout@v3

      # Get the Package version based on the package.json file
      - name: Get Version
        id: version
        uses: zoexx/github-action-json-file-properties@b9f36ce6ee6fe2680cd3c32b2c62e22eade7e590
        with: 
            file_path: "${{ env.packagePath }}/package.json"
            prop_path: "version"

      # Configure the Environment Variables needed for releasing the Package
      - name: Set Environment Variables
        run: |
          echo "zipFile=${{ vars.PACKAGE_NAME }}-${{ steps.version.outputs.value }}.zip" >> $GITHUB_ENV
          echo "unityPackage=${{ vars.PACKAGE_NAME }}-${{ steps.version.outputs.value }}.unitypackage" >> $GITHUB_ENV
          echo "version=${{ steps.version.outputs.value }}" >> $GITHUB_ENV

      # Zip the Package for release
      - name: Create Package Zip
        working-directory: "${{ env.packagePath }}"
        run: zip -r "${{ github.workspace }}/${{ env.zipFile }}" .
      
      # Build a list of .meta files for future use
      - name: Track Package Meta Files
        run: find "${{ env.packagePath }}/" -name \*.meta >> metaList
      
      # Make a UnityPackage version of the Package for release
      - name: Create UnityPackage
        uses: pCYSl5EDgo/create-unitypackage@cfcd3cf0391a5ef1306342794866a9897c32af0b
        with:
          package-path: ${{ env.unityPackage }}
          include-files: metaList

      # Tag_exists_check
      - name: Tag exists check
        uses: rickstaa/action-contains-tag@v1
        with:
          reference: "main"
          tag: "${{ env.version }}"

      # If Tag exists quit
      - name: Check if tag exists
        id: check_tag_exists
        if: ${{ steps.Tag_exists_check.outputs.retval }} == 'true'
        run: echo "Tag already exists. Exiting..."

      # Only continue if the tag doesn't exist
      - name: Continue if no tag exists
        if: ${{ steps.check_tag_exists.conclusion }} == 'success'
        run: echo "No existing tag. Continuing with release..."

        # Make a release tag of the version from the package.json file 
        - name: Create Tag
          id: tag_version
          uses: rickstaa/action-create-tag@88dbf7ff6fe2405f8e8f6c6fdfd78829bc631f83
          with:
            tag: "${{ env.version }}"

        # Publish the Release to GitHub
        - name: Make Release
          uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844
          with:
            files: |
              ${{ env.zipFile }}
              ${{ env.unityPackage }}
              ${{ env.packagePath }}/package.json
            tag_name: ${{ env.version }}

        # Trigger the build-listing workflow
        - name: Trigger build-listing Workflow
          run: |
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/pandrabox/vpm/dispatches \
              -d '{"event_type": "trigger-build-listing"}'
